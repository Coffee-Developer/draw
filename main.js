(()=>{"use strict";new class{constructor(t){this.canvas=document.getElementById(t),this.context=this.canvas.getContext("2d"),this.pressed=!1,this.x=void 0,this.y=void 0,this.ongoingTouches=new Array,this.handleStart=this.handleStart.bind(this),this.handleEnd=this.handleEnd.bind(this),this.handleMove=this.handleMove.bind(this),this.handleCancel=this.handleCancel.bind(this),this.ongoingTouchIndexById=this.ongoingTouchIndexById.bind(this),this.copyTouch=this.copyTouch.bind(this),this.canvas.width=window.innerWidth,this.canvas.height=window.innerHeight}mouseRecognitions(){this.canvas.addEventListener("mousedown",(t=>{this.pressed=!0,this.x=t.offsetX,this.y=t.offsetY})),this.canvas.addEventListener("mouseup",(()=>{this.pressed=!1,this.x=void 0,this.y=void 0})),this.canvas.addEventListener("mousemove",(t=>{if(this.pressed){const e=t.offsetX,n=t.offsetY;this.drawLine(this.x,this.y,e,n),this.x=e,this.y=n}}))}touchRecognitions(){this.canvas.addEventListener("touchstart",this.handleStart,!1),this.canvas.addEventListener("touchend",this.handleEnd,!1),this.canvas.addEventListener("touchmove",this.handleMove,!1),this.canvas.addEventListener("touchcancel",this.handleCancel,!1),this.canvas.addEventListener("touchleave",this.handleEnd,!1)}handleStart(t){const e=t.changedTouches;t.preventDefault();for(let t=0;t<e.length;t++)this.ongoingTouches.push(this.copyTouch(e[t]))}handleMove(t){t.preventDefault();const e=t.changedTouches;for(let t=0;t<e.length;t++){const n=this.ongoingTouchIndexById(e[t].identifier);this.x=this.ongoingTouches[n].clientX,this.y=this.ongoingTouches[n].clientY;const i=e[t].clientX,s=e[t].clientY;n>=0?(this.drawLine(this.x,this.y,i,s),this.ongoingTouches.splice(n,1,this.copyTouch(e[t]))):console.error("Can't figure out which touch to continue.")}}handleEnd(t){t.preventDefault();const e=t.changedTouches;for(let t=0;t<e.length;t++){const n=this.ongoingTouchIndexById(e[t].identifier);n>=0?(this.context.beginPath(),this.ongoingTouches.splice(n,1)):console.error("Can't figure out which touch to end.")}}handleCancel(t){t.preventDefault();const e=t.changedTouches;for(let t=0;t<e.length;t++)this.ongoingTouches.splice(t,1)}copyTouch(t){return{identifier:t.identifier,clientX:t.clientX,clientY:t.clientY}}ongoingTouchIndexById(t){for(var e=0;e<this.ongoingTouches.length;e++)if(this.ongoingTouches[e].identifier==t)return e;return-1}setup(){this.mouseRecognitions(),this.touchRecognitions()}drawLine(t,e,n,i){this.context.beginPath(),this.context.moveTo(t,e),this.context.lineTo(n,i),this.context.stroke()}}("sketch").setup()})();